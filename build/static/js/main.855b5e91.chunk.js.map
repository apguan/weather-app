{"version":3,"sources":["components/DetailedWeather.js","StyledComponents.js","components/WeatherCard.js","components/ErrorBoundary.js","components/WeatherList.js","App.js","serviceWorker.js","index.js"],"names":["DetailedWeather","hourly","labels","temps","humidity","forEach","val","push","dt_txt","split","Math","ceil","main","temp","data","datasets","label","backgroundColor","borderColor","hidden","options","layout","padding","left","right","top","bottom","scales","xAxes","gridLines","color","yAxes","width","height","SearchContainer","styled","div","Input","input","Enter","button","Container","Card","CardDetail","CardContent","ErrorMessage","Title","h3","WeatherLineItem","table","WeatherCard","state","open","modalView","setState","displayDate","date","props","slice","join","Date","toLocaleDateString","getMostCommonWeatherCondition","value","counter","conditions","reduce","acc","curr","Object","keys","a","b","this","high","low","onClose","closeIconSize","center","map","idx","key","weather","description","onClick","src","alt","Component","ErrorBoundary","error","err","info","hasError","children","WeatherList","location","weatherData","interval","getWeather","validateZipcode","times","axios","get","then","list","localTime","toLocaleString","min","max","minTemp","maxTemp","catch","console","log","handleLocationChange","e","preventDefault","target","test","refreshData","setInterval","enterKey","keyCode","onChange","placeholder","name","type","pattern","onKeyDown","App","className","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.855b5e91.chunk.js","sourcesContent":["import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\nconst DetailedWeather = ({ hourly }) => {\n  let labels = []\n  let temps = []\n  let humidity = []\n\n  hourly.forEach((val) => {\n    labels.push(val.dt_txt.split(',')[1])\n    temps.push(Math.ceil(val.main.temp))\n    humidity.push(val.main.humidity)\n  })\n\n  return (\n    <Line\n      data={{\n        labels: labels,\n        datasets: [\n          {\n            label: 'Temperature',\n            data: temps,\n            backgroundColor: [\n              'rgba(235, 151, 78, 0.6)'\n            ],\n            borderColor: [\n              'rgba(235, 151, 78, 0.7)'\n            ]\n          },\n          {\n            label: 'Humidity',\n            data: humidity,\n            backgroundColor: [\n              'rgba(129, 207, 224, 0.4)'\n            ],\n            borderColor: [\n              'rgba(129, 207, 224, 0.7)'\n            ],\n            hidden: true,\n          }\n        ]\n      }}\n      options={{\n        layout: {\n          padding: {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 75\n          }\n        },\n        scales: {\n          xAxes: [{\n            gridLines: {\n              color: \"rgba(0, 0, 0, 0)\",\n            }\n          }],\n          yAxes: [{\n            gridLines: {\n              color: \"rgba(0, 0, 0, 0)\",\n            }\n          }]\n        }\n      }}\n      width={700}\n      height={300}\n    />\n  )\n}\n\nexport default DetailedWeather","import styled from 'styled-components'\n\nexport const SearchContainer = styled.div`\n  display: flex;\n  width: 25%;\n  margin: 0 auto;\n`\n\nexport const Input = styled.input`\n\tfont-size:18px;\n\tpadding:10px 10px 10px 5px;\n\twidth:250px;\n\tborder:none;\n\tborder-bottom:1px solid #757575;\n  text-align: center;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nexport const Enter = styled.button`\n  margin-left: 10px;\n  position: relative;\n  border-radius: 2px;\n  width: 150px;\n  outline: none;\n  border-width: 0;\n  color: #ecf0f1;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, .6);\n  background-color: #1976d2;\n  transition: background-color .3s;\n\n  &:hover {\n    cursor: pointer;\n    background-color: rgb(17, 82, 147);\n  }\n`\n\nexport let Container = styled.div`\n  display: inline-flex;\n  margin: 5vh 0;\n`\n\nexport let Card = styled.div`\n  position: relative;\n  width: 15vw;\n  height: 300px;\n  background-color: #fff;\n\tborder-radius: 4px;\n\tmargin: 8px;\n\tmin-width: 150px;\n\toverflow: hidden;\n  color: rgba(0,0,0,.87);\n\tbox-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n\t-moz-box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n  -webkit-box-shadow: 0 3px 1px -2px rgba(0,0,0,.2), 0 2px 2px 0 rgba(0,0,0,.14), 0 1px 5px 0 rgba(0,0,0,.12);\n\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nexport let CardDetail = styled.div`\n  position: absolute;\n  text-align: center;\n  width: 100%;\n  margin: 0 auto;\n  bottom: 0;\n  line-height: 0.75em;\n  background-color: rgba(220,220,220, 0.5);\n`\n\nexport let CardContent = styled.div`\n  width:100%;\n  text-align: center;\n  margin: 5vh auto;\n`\n\nexport let ModalDetails = styled.div`\n  display: block;\n  line-height: .75em;\n`\n\nexport let ErrorMessage = styled.div`\n  margin-top: 10px;\n  color: red;\n  -webkit-animation: fadein 2s;\n  -moz-animation: fadein 2s;\n  -ms-animation: fadein 2s;\n  -o-animation: fadein 2s;\n  animation: fadein 2s;\n\n  @keyframes fadein {\n    from { opacity: 0; }\n    to   { opacity: 1; }\n  }\n\n  /* Firefox < 16 */\n  @-moz-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Safari, Chrome and Opera > 12.1 */\n  @-webkit-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Internet Explorer */\n  @-ms-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n\n  /* Opera < 12.1 */\n  @-o-keyframes fadein {\n      from { opacity: 0; }\n      to   { opacity: 1; }\n  }\n`\n\nexport let Title = styled.h3`\n  text-align: center;\n  margin: 0 auto;\n`\n\nexport let WeatherLineItem = styled.table`\n  text-align: left;\n  width: 90%;\n  margin: 0 auto;\n`\n","import React, { Component } from 'react'\nimport Modal from 'react-responsive-modal'\n\nimport DetailedWeather from './DetailedWeather.js'\n\nimport { Card, CardDetail, CardContent, Title, WeatherLineItem } from './../StyledComponents.js'\n\nexport default class WeatherCard extends Component {\n  state = {\n    open: false\n  }\n\n  modalView = () => this.setState({ open: !this.state.open })\n\n  displayDate = () => {\n    let date = this.props.date.split('/').slice(0, 2).join('/')\n    let localDate = new Date().toLocaleDateString().split('/').slice(0, 2).join('/')\n\n    if (date === localDate) return 'Today'\n\n    return date\n  }\n\n  getMostCommonWeatherCondition = (value) => {\n    //value are the keys for the weather object.\n    //can be used to get 'icons', 'main', or 'descriptions'\n    let counter = this.props.conditions.reduce((acc, curr) => {\n      if (curr[value] in acc) {\n        acc[curr[value]]++;\n      } else {\n        acc[curr[value]] = 1;\n      }\n      return acc;\n    }, {});\n\n    let condition = Object.keys(counter).reduce((a, b) => counter[a] > counter[b] ? a : b);\n\n    return condition;\n  }\n\n  render() {\n    const { high, low, hourly } = this.props\n\n    return (\n      <>\n        <Modal\n          open={this.state.open}\n          onClose={this.modalView}\n          closeIconSize={16}\n          center\n        >\n          <Title>Hourly Forecast</Title>\n          <DetailedWeather hourly={hourly} />\n          <WeatherLineItem>\n            <thead>\n              <tr>\n                <th>Time</th>\n                <th>Temperature (F°)</th>\n                <th>Humidity %</th>\n                <th>Description</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                hourly.map((val, idx) => {\n                  return (\n                    <tr key={idx}>\n                      <td>{val.dt_txt.split(',')[1]}</td>\n                      <td>{Math.ceil(val.main.temp)}°</td>\n                      <td>{val.main.humidity}%</td>\n                      <td>{val.weather[0].description}</td>\n                    </tr>\n                  )\n                })\n              }\n            </tbody>\n          </WeatherLineItem>\n        </Modal>\n\n        <Card onClick={this.modalView}>\n          <h3>{this.displayDate()}</h3>\n          <CardContent>\n            <img\n              src={`http://openweathermap.org/img/w/${this.getMostCommonWeatherCondition('icon')}.png`}\n              alt={this.getMostCommonWeatherCondition('description')}\n            />\n            <p>{this.getMostCommonWeatherCondition('description')}</p>\n          </CardContent>\n\n          <CardDetail>\n            <h4>high: {high}°</h4>\n            <h4>low: {low}°</h4>\n          </CardDetail>\n        </Card>\n      </>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class ErrorBoundary extends Component {\n  state = {\n    error: false\n  }\n\n  componentDidCatch(err, info) {\n    if (err) this.setState({ error: true })\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>We had issues loading the weather forecast. Please try again later</h1>;\n    }\n\n    return this.props.children\n  }\n}","import React, { Component } from 'react'\nimport axios from 'axios'\n\nimport WeatherCard from './WeatherCard.js'\nimport ErrorBoundary from './ErrorBoundary.js'\n\nimport { SearchContainer, Input, Enter, Container, ErrorMessage } from './../StyledComponents.js'\n\nexport default class WeatherList extends Component {\n\tstate = {\n\t\tlocation: '94105',\n\t\tweatherData: {},\n\t\terror: false,\n\t\tinterval: null\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.getWeather()\n\t\tthis.refreshData()\n\t}\n\n\tgetWeather = () => {\n\t\tif (this.validateZipcode()) {\n\t\t\tlet times = {}\n\n\t\t\taxios.get(`http://api.openweathermap.org/data/2.5/forecast?zip=${this.state.location},us&units=imperial&APPID=d5899153c8878820e426db8eec7aff6e`)\n\t\t\t\t.then((data) => {\n\t\t\t\t\tlet list = data.data.list\n\n\t\t\t\t\tlist.forEach((val) => {\n\t\t\t\t\t\t//bucket by dates\n\t\t\t\t\t\tlet localTime = new Date(val.dt_txt + 'Z').toLocaleDateString()\n\t\t\t\t\t\tlet temp = Math.ceil(val.main.temp)\n\t\t\t\t\t\tval.dt_txt = new Date(val.dt_txt + 'Z').toLocaleString()\n\n\t\t\t\t\t\tif (!times[localTime]) {\n\t\t\t\t\t\t\ttimes[localTime] = {\n\t\t\t\t\t\t\t\thourly: [val],\n\t\t\t\t\t\t\t\tminTemp: temp,\n\t\t\t\t\t\t\t\tmaxTemp: temp,\n\t\t\t\t\t\t\t\tconditions: [val.weather[0]]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttimes[localTime]['minTemp'] = Math.min(times[localTime]['minTemp'], temp)\n\t\t\t\t\t\t\ttimes[localTime]['maxTemp'] = Math.max(times[localTime]['maxTemp'], temp)\n\t\t\t\t\t\t\ttimes[localTime]['conditions'].push(val.weather[0])\n\t\t\t\t\t\t\ttimes[localTime]['hourly'].push(val)\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tthis.setState({ weatherData: times })\n\t\t\t\t}).catch((err) => {\n\t\t\t\t\tconsole.log(err)\n\t\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({ error: true })\n\t\t}\n\t}\n\n\thandleLocationChange = (e) => {\n\t\te.preventDefault()\n\t\tthis.setState({\n\t\t\tlocation: e.target.value,\n\t\t\terror: false\n\t\t})\n\t}\n\n\tvalidateZipcode = () => {\n\t\treturn /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(this.state.location)\n\t}\n\n\trefreshData = () => {\n\t\tthis.setState({\n\t\t\tinterval: setInterval(() => {\n\t\t\t\tthis.getWeather()\n\t\t\t}, 300000)\n\t\t})\n\n\t\tconsole.log('refreshed!')\n\t}\n\n\tenterKey = (e) => {\n\t\tif (e.keyCode === 13) {\n\t\t\te.preventDefault()\n\t\t\tthis.getWeather()\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<h3>5-Day Weather Forecast</h3>\n\t\t\t\t<SearchContainer>\n\t\t\t\t\t<Input\n\t\t\t\t\t\tonChange={this.handleLocationChange}\n\t\t\t\t\t\tplaceholder='Type in your zipcode'\n\t\t\t\t\t\tvalue={this.state.location}\n\t\t\t\t\t\tname=\"zip\"\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tpattern=\"[0-9]*\"\n\t\t\t\t\t\tonKeyDown={this.enterKey}\n\t\t\t\t\t/>\n\t\t\t\t\t<Enter onClick={this.getWeather}>Get Weather</Enter>\n\t\t\t\t</SearchContainer>\n\t\t\t\t{\n\t\t\t\t\tthis.state.error ?\n\t\t\t\t\t\t<ErrorMessage>Please enter a valid zipcode</ErrorMessage>\n\t\t\t\t\t\t:\n\t\t\t\t\t\tnull\n\t\t\t\t}\n\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<Container>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tObject.keys(this.state.weatherData).slice(0, 5).map((data, idx) => {\n\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<WeatherCard\n\t\t\t\t\t\t\t\t\t\tdate={data}\n\t\t\t\t\t\t\t\t\t\thigh={this.state.weatherData[data].maxTemp}\n\t\t\t\t\t\t\t\t\t\tlow={this.state.weatherData[data].minTemp}\n\t\t\t\t\t\t\t\t\t\thourly={this.state.weatherData[data].hourly}\n\t\t\t\t\t\t\t\t\t\tconditions={this.state.weatherData[data].conditions}\n\t\t\t\t\t\t\t\t\t\tkey={idx}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t</Container>\n\t\t\t\t</ErrorBoundary>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React from 'react';\nimport WeatherList from './components/WeatherList.js'\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}